############################
# STEP 1 build executable binary
############################
# golang alpine 1.12
FROM golang@sha256:8cc1c0f534c0fef088f8fe09edc404f6ff4f729745b85deae5510bfd4c157fb2 as builder

# Install git + SSL ca certificates.
# Git is required for fetching the dependencies.
# Ca-certificates is required to call HTTPS endpoints.
RUN apk update && apk add --no-cache git ca-certificates tzdata cmake make g++ openssl-dev curl pkgconfig && update-ca-certificates

# Create app user and group
RUN adduser -D -g '' idp-fe

WORKDIR $GOPATH/src/mypackage/myapp/
COPY . .

# Fetch dependencies.
RUN go get -d -v

# Build the binary
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -a -installsuffix cgo -o /go/bin/idp-fe .

############################
# STEP 2 build a small image
############################
FROM scratch

# Import from builder.
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /etc/passwd /etc/passwd

# Copy our static executable
COPY --from=builder /go/bin/idp-fe /go/bin/idp-fe

#ADD html /opt/sso/idp-fe/html
#ADD cert /opt/sso/idp-fe/cert

# Use an unprivileged user.
USER idp-fe

WORKDIR /opt/sso/idp-fe/

EXPOSE 8080

ENTRYPOINT ["/go/bin/idp-fe"]

